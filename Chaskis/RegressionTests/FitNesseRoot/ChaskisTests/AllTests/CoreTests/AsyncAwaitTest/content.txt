!*** Ensures that if we do an async/await in a IRC Handler, we actually background the task.
 * Start the Test

|'''Send Message'''|!chaskistest asyncawait threadname|'''To Channel'''|${channel1}|'''as'''|${testuser}|

 * Ensure before we call await, we are on the Parsing Queue Thread.

|'''Wait For Message'''|Starting\s+from\s+StringParsingQueue\s+Thread|'''On Channel'''|${channel1}|

 * Ensure our background thread is NOT the String Parsing Queue Thread
 
The thread name can be either empty if on Windows or "Thread Pool Worker" if on Linux.
|'''Wait For Message'''|Background\s+Thread\s+Name:\s+(Thread\s+Pool\s+Worker)?END|'''On Channel'''|${channel1}|

 * Ensure when we return from the await, we are back on the String Parsing Queue Thread.

|'''Wait For Message'''|Finishing\s+from\s+StringParsingQueue\s+Thread|'''On Channel'''|${channel1}|

*!

!*** Ensures that if we throw an Exception in a background thread, we don't crash
 * Start the Test

|'''Send Message'''|!chaskistest asyncawait exception|'''To Channel'''|${channel1}|'''as'''|${testuser}|

 * Ensure before we call await, we are on the Parsing Queue Thread.

|'''Wait For Message'''|About\s+to\s+throw\s+Exception                                        |'''On Channel'''|${channel1}|
|'''Wait For Message'''|Caught\s+Exception\s+Throwing\s+Exception\s+From\s+Background\s+Thread|'''On Channel'''|${channel1}|

!include <ChaskisTests.BuildingBlocks.SendCanary

*!
